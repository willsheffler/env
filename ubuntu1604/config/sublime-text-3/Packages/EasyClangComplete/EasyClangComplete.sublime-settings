{
  // SETTINGS FOR EASY_CLANG_COMPLETE.

  // Every path variable in settings can contain wildcards (without the ""):
  //  - "$project_base_path"  <-- replaced by the full path to the project to
  //                              which the currently opened view belongs.
  //  - "$project_name"       <-- replaced by the name of the current project.
  //  - "$clang_version"      <-- replaced by the numeric version of used clang.
  //  - "~"                   <-- replaced by the path to user home directory.
  //
  //  In addition to these, you can use your environment variables:
  //  - OSX and Linux:  $variable_name or ${variable_name}
  //  - Windows:        $variable_name or ${variable_name} or %variable_name%

  // Specify common flags that will be passed to clang for EVERY build.
  "common_flags" : [
    // some example includes
    "-I/usr/include",
    "-I$project_base_path/src",
    // this is needed to include the correct headers for clang
    "-I/usr/lib/clang/$clang_version/include"
  ],
  // C specific flags. Prepend common_flags for C files.
  "c_flags" : [
    "-std=c11"
  ],
  // C++ specific flags. Prepend common_flags for C++ files.
  "cpp_flags" : [
    "-std=c++11"
  ],

  // Define how we search needed flags. Prioritized from top to bottom.
  // Possible entries for "file":
  //  - "CMakeLists.txt"
  //  - "compile_commands.json"
  //  - ".clang_complete"
  //
  // Every entry has an option:
  //  - "search_in": <path>  <-- a path to the folder containing the file.
  //
  // "cmake" entry has additional options:
  //  - "flags": [<flags>]        <-- Additional flags to pass to cmake.
  //  - "prefix_paths": [<paths>] <-- array of folders that should be
  //                                  appended to CMAKE_PREFIX_PATHS before
  //                                  cmake is run.
  "flags_sources": [
    {"file": "CMakeLists.txt"},
    {"file": "compile_commands.json"},
    {"file": ".clang_complete"},
  ],

  // show compile errors on save
  "errors_on_save": true,

  // triggers for auto-completion
  "triggers" : [ ".", "->", "::"],

  // use libclang. If set to false will use clang_binary and parse the output of
  // `clang_binary -Xclang -code-complete-at...` instead.
  "use_libclang" : true,

  // make plugin verbose
  "verbose" : false,

  // add folder with current file with `-I` flag
  "include_file_folder" : true,

  // add parent folder of the current file's one with `-I` flag
  "include_file_parent_folder" : true,

  // pick the clang binary used by the plugin. This is used to determine the
  // version of the plugin and pick correct libclang bindings.
  "clang_binary" : "clang++",

  // ignore triggers and try to complete after each character
  // WARNING: can be very slow
  "autocomplete_all" : false,

  // hide the completions generated by other plugins
  "hide_default_completions": false,

  // Plugin uses smart caching to not load the data more times than needed.
  // Remove cache data older than specified time.
  // Format: <hours>:<minutes>:<seconds>: "HH:MM:SS".
  "max_cache_age": "00:30:00",

  // Show additional information on hover over function call/variable etc.
  // This replaces default sublime on hover behaviour
  "show_type_info": true
}
