#!/usr/bin/perl
##
## Copyright 2002, University of Washington, the Baker Lab, and Dylan Chivian.
##   This document contains private and confidential information and its
##   disclosure does not constitute publication.  All rights are reserved by
##   University of Washington, the Baker Lab, and Dylan Chivian, except those
##   specifically granted by license.
##
##  Initial Author: Dylan Chivian (dylan@lazy8.com)
##  $Revision: 1.1.1.1 $
##  $Date: 2003/09/05 01:47:28 $
##  $Author: dylan $
##
###############################################################################
                   

if ($#ARGV != 2) {
	print STDERR "usage: $0 <pdbfile> <axis> <rot(deg)>\n";
	exit -1;
}
$pdbfile = shift @ARGV;
$axis = shift @ARGV;
$rot_deg = shift @ARGV;

$rot = $rot_deg * 3.14159265358 / 180.0;

if ($axis =~ /X/i) {
	$rotmat = [[  1,         0,          0 ],
		   [  0,  cos $rot,  -sin $rot ],
	    	   [  0,  sin $rot,   cos $rot ]]; 
} elsif ($axis =~ /Y/i) {
	$rotmat = [[  cos $rot,  0,  sin $rot ],
       	    	   [         0,  1,         0 ],
            	   [ -sin $rot,  0,  cos $rot ]];
} elsif ($axis =~ /Z/i) {
	$rotmat = [[  cos $rot, -sin $rot,  0 ],
            	   [  sin $rot,  cos $rot,  0 ],
           	   [         0,         0,  1 ]]; 
} else {
	print STDERR "axis must be X, Y, or Z\n";
	exit -2;
}

open (PDB, $pdbfile);
while (<PDB>) {
	if ($_ !~ /^ATOM/ && $_ !~ /^HETATM/) {
		push (@buf, $_);
		next;
	}
	$atom = substr ($_, 13, 3);
	if ($atom !~ /^H/) {
		$x = substr ($_, 30, 8);
		$y = substr ($_, 38, 8);
		$z = substr ($_, 46, 8);
		$x_sum += $x;
		$y_sum += $y;
		$z_sum += $z;
		++$atoms;
	}
	push (@buf, $_);
}
close (PDB);

$x_av = $x_sum / $atoms;
$y_av = $y_sum / $atoms;
$z_av = $z_sum / $atoms;

for ($i=0; $i <= $#buf; ++$i) {
	next if ($buf[$i] !~ /^ATOM/ && $buf[$i] !~ /^HETATM/);

	$x = substr ($buf[$i], 30, 8);
	$y = substr ($buf[$i], 38, 8);
	$z = substr ($buf[$i], 46, 8);

	$x_rel = $x - $x_av;
	$y_rel = $y - $y_av;
	$z_rel = $z - $z_av;

	($x_rel, $y_rel, $z_rel) = &rotate ($rotmat, $x_rel, $y_rel, $z_rel);
	
	$x = $x_rel + $x_av;
	$y = $y_rel + $y_av;
	$z = $z_rel + $z_av;
	substr ($buf[$i], 30, 8) = sprintf ("%8.3f", $x);
	substr ($buf[$i], 38, 8) = sprintf ("%8.3f", $y);
	substr ($buf[$i], 46, 8) = sprintf ("%8.3f", $z);
}

print @buf;
exit 0;

########
# subs #
########

sub rotate {
	local ($rotmat, @cart) = @_;
	local @out = (0, 0, 0);
	my ($i, $j);
	for ($i=0; $i < 3; ++$i) {
		for ($j=0; $j < 3; ++$j) {
			$out[$i] += $rotmat->[$i]->[$j] * $cart[$j];
		}
	}
	return @out;
}

#######
# end #
#######
